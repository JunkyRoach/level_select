
go.property("fling_enabled", true)
go.property("fling_distance_threshold", 2000)	-- pixels per second

local WIDTH = sys.get_config("display.width")
local HEIGHT = sys.get_config("display.height")
local TILE_SIZE = 64

function init(self)
	msg.post("camera", "acquire_camera_focus")
	msg.post(".", "acquire_input_focus")
	self.fling = vmath.vector3()

	local pos = go.get_position()
	self.bounds = vmath.vector4(0,0,600,3000)
end

function final(self)
	
	msg.post("camera", "release_camera_focus")
	msg.post(".", "release_input_focus")	
end

local function limit(self, pos)
	local left = self.bounds.x
	local right = self.bounds.z - WIDTH
	local top = self.bounds.w - HEIGHT
	local bottom = self.bounds.y
	pos.x = math.min(pos.x, right)
	pos.x = math.max(pos.x, left)
	pos.y = math.min(pos.y, top)
	pos.y = math.max(pos.y, bottom)
	return pos
end

function update(self, dt)
	if not self.drag and self.fling_enabled then
		local pos = go.get_position() + self.fling
		go.set_position(limit(self, pos))
		self.fling = vmath.lerp(0.1, self.fling, vmath.vector3()) 
		
	end
end

function on_input(self, action_id, action)
	if action.pressed then
		self.drag = true
		self.pressed_pos = vmath.vector3(action.x, action.y, 0)
		self.pressed_time = socket.gettime()
		self.camera_pos = go.get_position()	
		
	elseif action.released then
		self.drag = false			

		if self.fling_enabled then
			local released_time = socket.gettime()
			local released_pos = vmath.vector3(action.x, action.y, 0)
			local delta_time = released_time - self.pressed_time
			local distance = vmath.length(released_pos - self.pressed_pos)
			local velocity = distance / delta_time
			if velocity >= self.fling_distance_threshold then
				local direction = vmath.normalize(self.pressed_pos - released_pos)
				self.fling = direction * velocity * 0.02
			end
		end
	end

	if self.drag then
		local mouse_pos = vmath.vector3(action.x, action.y, 0)
		local pos = self.camera_pos + self.pressed_pos - vmath.vector3(action.x, action.y, 0)
		go.set_position(limit(self, pos))
	end
end


function on_message(self, message_id, message, sender)
	
	if message_id == hash('set_camera_bounds') then
		self.bounds = message.bounds	
	end

	if message_id == hash('get_camera_position') then

		msg.post(sender, 'camera_position', {pos = go.get_position()})
	end
end